 # 获取本地打包好的文件名
  - name: get local file name
    local_action: shell ls {{ pwd }}/*.jar
    register: file_name
    tags: test

 # 上传jar包到服务器
  - name: upload jar file to server
    tags:
     - upload
     - test
    copy:
     src: "{{ file_name.stdout }}"
     dest: /home/
    when: file_name.stdout != ""


# 获取上次jar包运行的pid
  - name: get pid of {{ fileName }}
    tags:
     - test
    shell: "ps -ef | grep -v grep | grep {{ fileName }} | awk '{print $2}'"
    register: running_processes

# 发送停止运行信号
  - name: Kill running processes
    shell: "kill {{ item }}"
    tags:
     - test1
    with_items: "{{ running_processes.stdout_lines }}"

# 等待60s钟，确认获取的到的pid是否都停止运行
  - wait_for:
      path: "/proc/{{ item }}/status"
      state: absent
      timeout: 60
    tags:
     - test
    with_items: "{{ running_processes.stdout_lines }}"
    ignore_errors: yes
    register: killed_processes
# 强制杀死，未停止运行的进程
  - name: Force kill stuck processes
    shell: "kill -9 {{ item }}"
    with_items: "{{ killed_processes.results | select('failed') | map(attribute='item') | list }}"

# 启动新的jar包
  - name: start {{ fileName }}
    shell: "nohup java -jar /home/{{ fileName }} &  > out.log &"
    tags: start